# name: 'Terraform'

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
#   workflow_dispatch:
#     inputs:
#       # Terraform action you want to perform
#       action:
#         description: 'Terraform Action to Perform'
#         type: choice
#         options:
#         - terraform_apply
#         - terraform_destroy

# permissions:
#   contents: read

# jobs:
#   terraform_apply:
#     if: ${{ github.event.inputs.action == 'terraform_apply' }}
#     name: 'terraform_apply'
#     runs-on: ubuntu-latest
#     environment: production

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v3

#      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
#     - name: Install Terraform
#       run: |
#         wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
#         echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
#         sudo apt update && sudo apt install terraform

#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       working-directory: ./terraform
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: terraform init -upgrade -input=false

#     # Generates an execution plan for Terraform
#     - name: Terraform Plan
#       working-directory: ./terraform
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: terraform plan -input=false -lock=false

#       # On push to "main", build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     - name: Terraform Apply
#       working-directory: ./terraform
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: terraform apply -auto-approve -input=false -lock=false

  
#   terraform_destroy:
#     name: 'terraform_destroy'
#     if: ${{ github.event.inputs.action == 'terraform_destroy' }}
#     runs-on: ubuntu-latest
#     environment: production

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v3

#      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
#     - name: Install Terraform
#       run: |
#         wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
#         echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
#         sudo apt update && sudo apt install terraform


#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       working-directory: ./terraform
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: terraform init -upgrade -input=false

#     # Destroy
#     - name: Terraform Destroy
#       working-directory: ./terraform
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: terraform destroy --auto-approve -input=false -lock=false
